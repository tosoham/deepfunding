timestamp,juror,repo_a,repo_b,parent,choice,multiplier,reasoning
2025-01-24T19:03:52.628Z,L1Juror1,https://github.com/erigontech/erigon,https://github.com/hyperledger/besu,ethereum,2,5.27,"Erigon and Besu are both execution clients. Today, Erigon is 3% of the network and Besu is 16%. We can also analyze their contributions to client diversity by looking at the Herfindahl index of execution clients with and without each one:

>>> def hh(l): return sum([x**2 for x in l]) / sum(l)**2
... 
>>> hh([43,36,16,3,2])
0.3414
>>> hh([43,36,16,2])
0.3618875544691253
>>> hh([43,36,3,2])
0.447562358276644

This suggests that Besu is 5.2x valuable toward decreasing the Herfindahl index. If we average the raw number (5.33x) and the Herfindahl contribution (5.2x), we get 5.27x.

Note that Erigon is also known to be significant inspiration for many design decisions in Reth. However, the spirit of the graph-based contribution evaluation approach is that any such indirect contributions should not be counted here, rather they should be treated as a separate edge in the graph from Erigon to Reth."
2025-01-24T19:17:57.066Z,L1Juror1,https://github.com/web3/web3.js,https://github.com/paradigmxyz/reth,ethereum,1,2.22,"Reth has a 2% market share in Ethereum execution clients. Using Herfindahl indices (0.341 with Reth, 0.355 without it), one can argue that Reth makes the staking client distribution 3.85% more decentralized. If we take this marginal contribution as a fraction of all marginal contributions, we get (0.0385 / (0.0385 + ...)) = 0.0410, ie. Reth is doing 4% of the work of improving client decentralization. Averaging these two, we give it a 3% contribution share.

web.js is a crucial library for the user interface layer; AI estimates it to have a 20% market share.

Intuitively, it feels like execution clients are ~3x more important than the web3 library: Ethereum cannot survive without the former, though the latter is still very important.

Hence the total score is 0.2 / 0.03 * 3 = 2.22 in web3.js's favor."
2025-01-24T19:20:19.601Z,L1Juror1,https://github.com/erigontech/erigon,https://github.com/ethereum/go-ethereum,ethereum,2,10.55,"Erigon and Geth are both execution clients. Their market shares are 3% and 43%.

We can evaluate their contributions to client diversity by comparing Herfindahl index of staking with and without them:

>>> def hh(l): return sum([x**2 for x in l]) / sum(l)**2
... 
>>> hh([43, 36, 16, 3, 2])
0.3414
>>> hh([43, 36, 16, 2])
0.3618875544691253
>>> hh([36, 16, 3, 2])
0.4816866728224069

This suggests Geth's contribution to decentralization is 6.8x greater than Erigon's. Meanwhile, by raw market share, Geth has 14.3x more usage. Averaging these two, we get 10.55x in Geth's favor."
2025-01-24T19:25:40.017Z,L1Juror1,https://github.com/ethereumjs/ethereumjs-monorepo,https://github.com/ethers-io/ethers.js,ethereum,2,4.0,"EthereumJS is not used directly as an execution client to any significant extent, but it is used as a library in Truffle, Remix, light clients and other contexts. ethers.js is used by Hardhat, but is also used heavily by application frontends. In general, ethers.js is significantly more prominent."
2025-01-15T11:19:51.121Z,L1Juror10,https://github.com/erigontech/erigon,https://github.com/ethereum/web3.py,ethereum,1,50.0,"A performant and robust execution client implementation is key for the multi-client ethos of Ethereum. A key part to decentralization and a much harder thing to implement/maintain. web3.py is great, but there are a lot less moving pieces and it requires way fewer people to maintain."
2025-01-15T11:22:16.292Z,L1Juror10,https://github.com/prysmaticlabs/prysm,https://github.com/hyperledger/besu,ethereum,1,3.0,"Prysm has shouldered the burden of the majority consensus client on Ethereum for a very long time. If something happened with Prysm during that time, the network would have definitely had issues during previous times. They have done awesome work. Besu is great too, but this is the reason I gave a multiplier to prysm."
2025-01-15T11:24:06.402Z,L1Juror10,https://github.com/safe-global/safe-smart-account,https://github.com/paradigmxyz/reth,ethereum,1,1.5,"This is a tricky one! Safes secure a ton of value on Ethereum and have been of the reasons that institutions and capital have been able to securely thrive on network over time. reth has lived for a shorter amount of time, but has done lots of great work and is poised to become an important execution client moving forward."
2025-01-15T11:25:53.213Z,L1Juror10,https://github.com/vyperlang/vyper,https://github.com/ethereum/go-ethereum,ethereum,2,10.0,"Geth is an essential piece of infrastructure for the Ethereum ecosystem and has been the main client almost since inception. They have also shouldered the majority execution client burden since the merge. Vyper is an important tool as well, but it's not as much used as Solidity and so I believe that Geth is significantly more valuable."
2025-01-15T20:40:34.675Z,L1Juror11,https://github.com/hyperledger/besu,https://github.com/grandinetech/grandine,ethereum,1,50.0,"besu for its larger dominance, context within consensys, collaboration with teku"
2025-01-15T20:42:56.210Z,L1Juror11,https://github.com/erigontech/erigon,https://github.com/sigp/lighthouse,ethereum,2,5.0,lighthouse for its collaboration across and good relationships with other consensus layer (and execution layer) clients. erigon is valuable for its archive nodes and non-validating node prevalence
2025-01-15T20:43:45.271Z,L1Juror11,https://github.com/grandinetech/grandine,https://github.com/ethereum/solidity,ethereum,2,40.0,solidity touches far more of the stack and doesn't have as many (or any) equivalents as grandine does
2025-01-23T14:54:25.432Z,L1Juror13,https://github.com/web3/web3.js,https://github.com/a16z/helios,ethereum,1,5.0,"web3.js has been integral since Ethereum’s inception (2015), enabling developers to build DApps, interact with smart contracts, and manage wallets. Its APIs became the de facto standard for Ethereum JavaScript development, powering critical infrastructure like MetaMask and Truffle, while Helios addresses a specific trust vector."
2025-01-23T15:26:15.490Z,L1Juror13,https://github.com/chainsafe/lodestar,https://github.com/safe-global/safe-smart-account,ethereum,1,8.0,"Lodestar is a core component of Ethereum’s consensus layer, which is indispensable for network security and scalability. While Safe is a smart contract-based wallet framework designed for AA, enabling features like multi-signature security, customizable transaction guards, and modular extensions. Lodestar’s contribution to consensus mechanism is foundational and non-negotiable. Safe Smart Account, while transformative for user adoption, builds atop this infrastructure."
2025-01-23T16:02:52.540Z,L1Juror13,https://github.com/paradigmxyz/reth,https://github.com/vyperlang/vyper,ethereum,1,3.0,"Reth contributes to Ethereum’s infrastructure scalability and L2 adoption. Its performance optimizations directly address Ethereum’s gas throughput limitations, enabling cheaper and faster transactions. Vyper strengthens Ethereum’s security foundation by reducing smart contract exploits, fostering trust in decentralized applications."
2025-01-23T16:11:48.029Z,L1Juror13,https://github.com/ethereumjs/ethereumjs-monorepo,https://github.com/nethermindeth/nethermind,ethereum,2,5.0,"Execution clients like Nethermind are essential for Ethereum’s day-to-day operations. Nethermind’s adoption reduces reliance on Geth, mitigating single-point-of-failure risks. While EthereumJS enables developer innovation."
2025-01-23T16:29:20.907Z,L1Juror13,https://github.com/status-im/nimbus-eth2,https://github.com/erigontech/erigon,ethereum,2,1.5,"Erigon revolutionized execution-layer scalability by drastically reducing node sync times and storage demands. By making full nodes accessible to more operators, it strengthened Ethereum’s execution-layer security and reliability, Nimbus directly enabled Ethereum’s transition to PoS by providing a resource-efficient consensus client, Both projects are essential, but Erigon’s execution-layer optimizations have a broader, more foundational impact on Ethereum’s functionality and adoption."
2025-01-23T16:33:06.018Z,L1Juror13,https://github.com/scaffold-eth/scaffold-eth-2,https://github.com/paradigmxyz/reth,ethereum,2,4.0,"Reth is a high-performance Ethereum execution client written in Rust, designed to improve network infrastructure. While Scaffold-ETH-2 is a developer toolkit focused on simplifying dApp development on Ethereum. Reth’s role in securing Ethereum’s base layer provides disproportionately higher value."
2025-01-23T16:38:52.720Z,L1Juror13,https://github.com/ethereum/fe,https://github.com/hyperledger-web3j/web3j,ethereum,2,5.0,"Fe is a statically typed, Rust-inspired smart contract language designed for Ethereum.  Web3j is a Java/Android library for interacting with Ethereum nodes and smart contracts. Web3j has immediate impact on Ethereum’s developer, which has enabled thousands of projects since 2016, whereas Fe’s contributions are still emerging"
2025-01-23T16:42:20.093Z,L1Juror13,https://github.com/ethers-io/ethers.js,https://github.com/nomicfoundation/hardhat,ethereum,1,3.0,"Ethers.js serves as an essential foundation, while Hardhat acts as a productivity booster. Though Hardhat speeds up development, Ethers.js fundamentally enables the process. For each project utilizing Hardhat, numerous others depend purely on Ethers.js for vital functions."
2025-01-23T16:55:00.152Z,L1Juror13,https://github.com/ethereum/web3.py,https://github.com/consensys/teku,ethereum,2,10.0,"While web3.py democratizes Ethereum development, Teku plays a crucial role in securing and scaling the network following the Merge, making it essential. Teku's focus on enterprise solutions has institutionalized Ethereum staking, which attracts institutional capital and stabilizes the network's economic model. In contrast, web3.py has a more limited impact, primarily serving the needs of Python developers rather than the broader Ethereum network."
2025-01-23T16:59:25.720Z,L1Juror13,https://github.com/erigontech/erigon,https://github.com/ethereum-lists/chains,ethereum,1,5.0,"Chains plays a crucial role in promoting ecosystem growth, while Erigon is essential for enhancing Ethereum’s functionality by facilitating efficient node operation and scalability. Erigon's technical improvements specifically tackle key challenges faced by Ethereum, including node accessibility and state bloat. In contrast, while Ethereum-Lists/Chains addresses coordination issues, it does not enhance the resilience of the protocol at the fundamental level."
2025-01-23T17:01:15.387Z,L1Juror13,https://github.com/ethers-io/ethers.js,https://github.com/ethereum/fe,ethereum,1,10.0,"Ethers.js directly enables millions of dApps, wallets, and tools, forming the backbone of Ethereum’s JavaScript ecosystem. Fe’s impact is theoretical and unproven."
2025-01-20T10:07:56.392Z,L1Juror14,https://github.com/ethereum/solidity,https://github.com/nethermindeth/nethermind,ethereum,1,10.0,Solidity is the moat of Ethereum.
2025-01-20T10:08:50.289Z,L1Juror14,https://github.com/paradigmxyz/reth,https://github.com/ethereum/solidity,ethereum,2,10.0,Solidity is the moat of Ethereum DevX. Reth might grow in usefulness in scaling OP stack in the upcoming years.
2025-01-20T10:09:14.587Z,L1Juror14,https://github.com/status-im/nimbus-eth2,https://github.com/ethereum/solidity,ethereum,2,10.0,Solidity has no substitutes.
2025-01-20T10:09:40.295Z,L1Juror14,https://github.com/web3/web3.js,https://github.com/ethereum/remix-project,ethereum,2,3.0,Remix is still very relevant till today.
2025-09-06T17:57:12.062Z,L1Juror14,https://github.com/erigontech/silkworm,https://github.com/ethereum/remix-project,ethereum,2,10.0,remix is the hello world of many ETH devs
2025-09-06T18:01:50.951Z,L1Juror14,https://github.com/ethereum/py-evm,https://github.com/ethpandaops/ethereum-package,ethereum,2,2.0,required for safe testing of hardforks. the other has alternatives.
2025-09-06T18:04:05.896Z,L1Juror14,https://github.com/eth-infinitism/account-abstraction,https://github.com/lambdaclass/lambda_ethereum_consensus,ethereum,1,3.0,account abstraction ships more
2025-09-06T17:56:40.212Z,L1Juror14,https://github.com/ethpandaops/ethereum-helm-charts,https://github.com/argotorg/solidity,ethereum,2,30.0,solidity is ethereum's moat and export
2025-02-20T16:05:26.011Z,L1Juror15,https://github.com/wevm/viem,https://github.com/nomicfoundation/hardhat,ethereum,2,1.5,"Github numbers seem to match intuition on this one with a 2.6x multiplier in favor of hardhat.  Intuition suggests hardhat should be servicing a larger userbase than viem which is typescript focused as opposed to the more broad ""smart contracts"" focused.  Viem does have a truly impressively large number of dependent projects... so I've chosen a lower multiplier to try and capture this."
2025-02-20T16:08:00.121Z,L1Juror15,https://github.com/vyperlang/vyper,https://github.com/ethereum/fe,ethereum,2,2.0,"Very subjective here.  I have a negative historical view of Vyper.  But also fe has been in R&D forever and is currently unusable because they decided to rewrite a major core component.  Fe wins by a small margin because I believe that it will eventually be a solid tool given enough time to get to production, where-as I am skeptical that vyper can every be a robust production level tool."
2025-03-01T02:25:04.715Z,L1Juror15,https://github.com/ethereum/py-evm,https://github.com/ethereum/sourcify,ethereum,2,2.5,"Github data says that py-evm should be more important but my intuition goes against this.  I think that py-evm used to be more important in helping foster knowledge about the EVM, but I think this role has been supplanted by the EEELs spec.  Sourcify however still feels relevant to the security infrastructure of Ethereum since smart contract source verification should remain important for the forseable future."
2025-03-01T02:26:27.301Z,L1Juror15,https://github.com/erigontech/erigon,https://github.com/alloy-rs/alloy,ethereum,1,4.0,"Erigon wins as it is the only Ethereum client that feels architecturally different than the others and in being a fully functional execution client is useful across the whole ecosytem.  Allow is a rust specific tool, and while quite important, it doesn't have nearly as broad a reach."
2025-03-01T04:24:15.931Z,L1Juror15,https://github.com/erigontech/erigon,https://github.com/hyperledger-web3j/web3j,ethereum,1,2.5,"Another that goes against github numbers.  Good libraries for Java seem quite important for Ethereum given that mobile development is going to depend on them, however, I view Erigon as being a very important client in our ecosystem due to it being the only execution layer client who's architecturally distinct from the other clients."
2025-03-01T16:06:47.292Z,L1Juror15,https://github.com/grandinetech/grandine,https://github.com/chainsafe/lodestar,ethereum,1,2.0,I'm inclined to give this one to Grandine.  They are brand new and yet they seem to have more share on the network (by a very small margin) than lodestar.  Lodestar has existed for a long time with very little success in gaining usership.
2025-03-01T16:08:01.124Z,L1Juror15,https://github.com/consensys/teku,https://github.com/erigontech/erigon,ethereum,1,2.5,"Teku holds a solid share of the Consensus client share, while Erigon holds a very meager share of the execution side."
2025-01-23T00:54:40.483Z,L1Juror16,https://github.com/safe-global/safe-smart-account,https://github.com/a16z/helios,ethereum,1,20.0,"This is quite a disparate comparison. Safe is prominent as the leading multisig platform, and its success so far provides value for its users as well as the broader reputation of Ethereum as a whole as a secure place to store high-value assets. As for Helios, I am having difficulty finding statistics around real-world usage, even for the broader light client space as a whole. Ethereum today is not particularly light-client-friendly, and it may be difficult for modern light clients to provide much value, through no fault of their own. Nevertheless, Safe seems to have provided much more tangible benefit to Ethereum as a whole as of now, though that number is difficult to quantify."
2025-01-24T01:45:02.484Z,L1Juror17,https://github.com/grandinetech/grandine,https://github.com/status-im/nimbus-eth2,ethereum,2,5.0,"Nimbus-eth2 is indispensable to Ethereum’s decentralization and accessibility, while Grandine remains a supplementary option for high-performance scenarios. Nimbus-eth2’s lightweight architecture (1 GiB memory) enables low-cost hardware like Raspberry Pi to run nodes, democratizing participation and strengthening censorship resistance—a core Ethereum value."
2025-01-24T01:51:46.455Z,L1Juror17,https://github.com/sigp/lighthouse,https://github.com/ethereumjs/ethereumjs-monorepo,ethereum,1,10.0,"Lighthouse’s role in Ethereum’s operational survival, decentralization, and security dwarfs EthereumJS’s utility. The 10x importance ratio reflects Lighthouse’s irreplaceability as infrastructure versus EthereumJS’s supplementary developer tools. While both projects contribute to the ecosystem, Lighthouse’s impact on Ethereum’s core functionality is exponentially greater."
2025-01-24T02:18:48.528Z,L1Juror17,https://github.com/ethers-io/ethers.js,https://github.com/eth-infinitism/account-abstraction,ethereum,1,100.0,"Ethers.js is Ethereum’s present lifeline, while ERC-4337 is a future enabler. The 100x importance ratio reflects Ethers.js’s irreplaceable role in daily operations versus ERC-4337’s nascent, unproven utility. For Ethereum’s survival today, Ethers.js is indispensable; for its evolution tomorrow, ERC-4337 is optional."
2025-01-24T02:24:52.470Z,L1Juror17,https://github.com/eth-infinitism/account-abstraction,https://github.com/alloy-rs/alloy,ethereum,2,10.0,"Alloy secures Ethereum’s developer ecosystem. Without it, dApps, wallets, and infrastructure (e.g., Foundry) would collapse. ERC-4337, while transformative, remains optional for Ethereum’s current operations."
2025-01-24T02:32:09.269Z,L1Juror17,https://github.com/ethereum/remix-project,https://github.com/ethereum/solidity,ethereum,2,999.0,"Remix simplifies development but is non-essential. Developers can use CLI tools, Foundry, or other IDEs without impacting Ethereum’s functionality."
2025-01-24T02:41:06.537Z,L1Juror17,https://github.com/wevm/viem,https://github.com/vyperlang/vyper,ethereum,2,20.0,"vyperlang/vyper’s value far exceeds its current adoption rate. As Solidity’s only substantive alternative, Vyper ensures Ethereum has contingency plans against language-level vulnerabilities. Its security-centric design offers superior options for high-risk contracts. While wevm/viem enhances development efficiency, its tooling role can be substituted by other libraries, whereas Vyper’s role in ecosystem defense is irreplaceable."
2025-01-24T02:47:20.065Z,L1Juror17,https://github.com/sigp/lighthouse,https://github.com/consensys/teku,ethereum,1,1.5,Lighthouse’s importance to Ethereum’s consensus layer eclipses Teku’s due to its broader adoption.
2025-01-24T03:13:57.993Z,L1Juror17,https://github.com/prysmaticlabs/prysm,https://github.com/web3/web3.js,ethereum,1,100.0,"Prysm’s importance to Ethereum dwarfs Web3.js by orders of magnitude due to its protocol-critical role, irreplaceable function, and ongoing maintenance, whereas Web3.js has become obsolete."
2025-01-24T03:25:50.949Z,L1Juror17,https://github.com/ethereum/go-ethereum,https://github.com/nomicfoundation/hardhat,ethereum,1,50.0,Geth is core infrastructure ensuring Ethereum’s execution layer operates securely and efficiently. Geth’s dominance in node distribution (~43% of execution clients) makes its stability paramount. HardHat is a contract development tool while  Foundry’s rise has reduced its uniqueness.
2025-01-24T03:25:40.315Z,L1Juror17,https://github.com/nethermindeth/nethermind,https://github.com/nomicfoundation/hardhat,ethereum,1,50.0,Nethermind is core infrastructure ensuring Ethereum’s execution layer operates securely and efficiently. Nethermind's dominance in node distribution (~36% of execution clients) makes its stability paramount. HardHat is a contract development tool while Foundry’s rise has reduced its uniqueness.
2025-01-24T17:51:14.540Z,L1Juror18,https://github.com/sigp/lighthouse,https://github.com/ethereum/sourcify,ethereum,2,999.0,Makes smart contracts data accessible for anyone
2025-03-01T23:45:15.947Z,L1Juror19,https://github.com/ethereum/web3.py,https://github.com/ethereumjs/ethereumjs-monorepo,ethereum,2,10.0,Ethereumjs powered hardhat which enabled devs to test their code
2025-03-01T23:45:47.006Z,L1Juror19,https://github.com/erigontech/erigon,https://github.com/ethereumjs/ethereumjs-monorepo,ethereum,1,100.0,"Erigon pioneered new node architecture, enabling nodes to run much more cheaply with smaller databases"
2025-03-01T23:46:01.328Z,L1Juror19,https://github.com/erigontech/erigon,https://github.com/ethereum/py-evm,ethereum,1,100.0,Erigon runs in production
2025-03-01T23:46:17.565Z,L1Juror19,https://github.com/safe-global/safe-smart-account,https://github.com/ethereum/go-ethereum,ethereum,2,1.0,"Without geth, Safe would not be able to exist"
2025-03-01T23:47:59.695Z,L1Juror19,https://github.com/paradigmxyz/reth,https://github.com/ethers-io/ethers.js,ethereum,1,2.0,"ethers historically was influential but did not keep up with the times, reth attracted new talent to ethereum core development"
2025-03-01T23:48:31.564Z,L1Juror19,https://github.com/nethereum/nethereum,https://github.com/hyperledger-web3j/web3j,ethereum,2,2.0,web3j has more stars on github
2025-03-01T23:48:54.542Z,L1Juror19,https://github.com/ethereum/web3.py,https://github.com/ethereum/remix-project,ethereum,2,2.0,Remix was super important for developers who just wanted to test something out
2025-03-01T23:49:30.340Z,L1Juror19,https://github.com/alloy-rs/alloy,https://github.com/nethermindeth/nethermind,ethereum,2,3.0,"Nethermind has been around much longer. Both nethermind and alloy are influential, but nethermind has had a longer time to be influential"
2025-03-01T23:49:55.709Z,L1Juror19,https://github.com/ethereum/remix-project,https://github.com/vyperlang/titanoboa,ethereum,1,10.0,Remix was really important for devs to test out ideas quickly on ethereum
2025-01-28T12:59:07.641Z,L1Juror20,https://github.com/vyperlang/vyper,https://github.com/ethers-io/ethers.js,ethereum,2,2.0,ethers.JS has done a lot to onboard and make it easy for new devs to interact with the chain
2025-01-28T12:59:37.537Z,L1Juror20,https://github.com/alloy-rs/alloy,https://github.com/consensys/teku,ethereum,2,5.0,teku is a client and they helped a lot with delivering the ethereum POS upgrade as well as secure the network
2025-01-28T13:00:05.871Z,L1Juror20,https://github.com/nomicfoundation/hardhat,https://github.com/prysmaticlabs/prysm,ethereum,2,5.0,prysm is a client and are vital to the secure functioning of ethereum and hence its success
2025-01-28T13:00:35.114Z,L1Juror20,https://github.com/hyperledger/besu,https://github.com/vyperlang/vyper,ethereum,1,5.0,"besu is a full execution client that secures ethereum and is used by RPC providers like infura, which is very important to ethereums success"
2025-01-31T17:18:22.757Z,L1Juror21,https://github.com/scaffold-eth/scaffold-eth-2,https://github.com/hyperledger-web3j/web3j,ethereum,2,2.0,"I think scaffold is probably the more widely applicable to devs because it's compatible with typescript frontends but web3j has more legacy, more downloads, etc which makes it more historically valuable to the success of Ethereum. That said I think there is more work to do on scaffold than web3j at this point so I don't think a large credit multiplier is justified. I'm putting in 2 which is lower than the ratio of downloads/watches/etc I use as indicators of adoption."
2025-01-31T17:24:38.933Z,L1Juror21,https://github.com/scaffold-eth/scaffold-eth-2,https://github.com/ethereum/py-evm,ethereum,2,4.0,"Py-EVM is lower level, more critical infrastructure with more adoption and impact than scaffold. I don't think it's the most widely used node software but it still definitely has had more impact. I'm giving a multiplier based on some average of the stars/watchers/contributors and being more essential to the function of the network."
2025-02-01T06:22:49.111Z,L1Juror22,https://github.com/prysmaticlabs/prysm,https://github.com/wevm/viem,ethereum,1,5.0,Hard choice. I am not familiar with the viem. Prysm was one of the first clients participated in the PoS upgrade and for some time after that it was the super majority client which signifies its importance in adopting new stakers that are important for the mainnet security. It also brought up and retained in Ethereum brilliant engineers.
2025-02-01T06:36:22.123Z,L1Juror22,https://github.com/ethereumjs/ethereumjs-monorepo,https://github.com/nomicfoundation/hardhat,ethereum,2,2.0,Tools like hardhat are very important for developers on Ethereum and for Ethereum adoption. I am not familiar with the tool but at least their mainnet forking can be very useful!
2025-02-01T06:51:05.624Z,L1Juror22,https://github.com/sigp/lighthouse,https://github.com/chainsafe/lodestar,ethereum,1,2.0,Based on the client diversity we can conclude that Lighthouse has been more important for Ethereum. Lighthouse team also brought many brilliant talents to Ethereum R&D
2025-02-01T06:58:21.979Z,L1Juror22,https://github.com/sigp/lighthouse,https://github.com/scaffold-eth/scaffold-eth-2,ethereum,1,2.0,"Lighthouse is one of the clients that took a key role in the Merge. According to the client diversity, this client implementation is used by at least 1/3 of stakers for a couple of years already. Client diversity and stakers adoption is very important for Ethereum security, likewise the dev tooling. Preference is to LH but not significant"
2025-02-03T15:30:05.000Z,L1Juror23,https://github.com/a16z/helios,https://github.com/ethereum/solidity,ethereum,2,4.0,Solidity is the battle proof language for smart contracts. I think it contribute to the success of Ethereum more.
2025-03-30T05:15:03.086Z,L1Juror24,https://github.com/ethereum-lists/chains,https://github.com/ethereum/web3.py,ethereum,2,2.0,"chains list is usefule for some explorers, wallets or DApps but it is not a necessity to the ecosystem while web3.py helps many smart contract devs write in Python. Though more no python devs will probably find chains list more useful to them."
2025-03-30T05:19:12.982Z,L1Juror24,https://github.com/status-im/nimbus-eth2,https://github.com/ethereum/remix-project,ethereum,1,2.0,Both are less popular choice in their respective categories but I'm biased as a dev who had used remix and I will choose nimbus over remix. Though I pick a rather small credit multiplier.
2025-03-30T05:21:23.473Z,L1Juror24,https://github.com/ethereum/solidity,https://github.com/eth-infinitism/account-abstraction,ethereum,1,5.0,"account-abstraction is super important for wallets and users but since it is currently written in solidity and is among so many projects built with solidity, I will definitely choose solidity over account-abstraction."
2025-03-30T05:45:07.269Z,L1Juror24,https://github.com/ethereum/sourcify,https://github.com/erigontech/erigon,ethereum,2,10.0,Erigon contributes to the multi-client security of Ethereum and has port many improvements back to go-ethereum while sourcify is also like the multi-client version of smart contract explorer but since it is rather new and small compared to Etherscan. I will choose Erigon over sourcify.
2025-03-30T07:14:16.531Z,L1Juror24,https://github.com/foundry-rs/foundry,https://github.com/ethereumjs/ethereumjs-monorepo,ethereum,2,3.0,Foundry is more performant and feature rich but ethereumjs is much older than Foundry. It has helped so many projects building out the web app which interact with smart contracts so I will choose ethereumjs over foundry.
2025-03-30T07:26:03.187Z,L1Juror24,https://github.com/sigp/lighthouse,https://github.com/nethereum/nethereum,ethereum,1,5.0,Lighthouse is the (second) most popular CL client while nethereum is the minority of EL client. They all contribute to the security of Ethereum and I set credit multiplier to 5 given their market share.
2025-03-30T07:19:50.366Z,L1Juror24,https://github.com/nethermindeth/nethermind,https://github.com/nethereum/nethereum,ethereum,1,10.0,Nethermind is the second most popular EL client while nethereum is less popular. The multiplier is set to 10 given their market shares.
2025-03-30T07:23:19.652Z,L1Juror24,https://github.com/alloy-rs/alloy,https://github.com/ethereum/sourcify,ethereum,1,5.0,alloy is a great tool for rust smart contract devs which more and more projects are building on. Sourcify contributes to the diversity of smart contracts explorer though its target audience is smaller than alloy.
2025-03-30T07:25:51.954Z,L1Juror24,https://github.com/consensys/teku,https://github.com/ethereum/sourcify,ethereum,1,20.0,Teku is the third most popular CL client which contributes no less security than Lighthouse or Prysm in my opinion. Sourcify contributes to the diversity of smart contracts explorer but it's significance is much smaller than Teku as clients are much more important than explorers.
2025-03-30T07:29:56.793Z,L1Juror24,https://github.com/wevm/viem,https://github.com/openzeppelin/openzeppelin-contracts,ethereum,2,50.0,openzeppelin contracts help all smart contracts devs save time developing the same libraries and their quality is incomparable while viem serves mainly JS devs. I will choose openzeppelin contracts over viem and set the credit multiplier given their impact on the number of smart contract devs.
2025-02-26T06:13:40.360Z,L1Juror25,https://github.com/sigp/lighthouse,https://github.com/ethereum/web3.py,ethereum,2,2.0,"I believe that web3.py is more than twice as valuable for Ethereum's success as Lighthouse is. Lighthouse is one of the most widely used consensus clients, while web3.py is a Python library for interacting with Ethereum. Although they can’t be directly compared, here are a few perspectives:

- GitHub Stars: As of February 2025, Lighthouse has 3.1k stars, while web3.py has 5.2k stars—making web3.py about 1.67 times larger in this regard.
- Subjective Perspective: web3.py is essentially the de facto standard among Python libraries, and since Python is one of the most popular programming languages, it’s an extremely important library. Lighthouse, along with Prysm, is one of the leading consensus clients. However, because diversity in consensus clients is very important, and every client should hold a certain position, Lighthouse is relatively less crucial.

Overall, I believe that web3.py is more than twice as valuable to Ethereum’s success compared to Lighthouse."
2025-02-12T08:30:54.890Z,L1Juror25,https://github.com/ethers-io/ethers.js,https://github.com/paradigmxyz/reth,ethereum,2,30.0,"I've been using Ethers.js regularly, and there's no denying it's an incredibly useful tool. Since JavaScript and TypeScript are so popular, Ethers.js has secured an important place in that ecosystem. One thing I've noticed—though it might not be unique to Ethers.js—is that the jump from version 5 to version 6 involved some major changes. I often ran into implementation issues because of dependency problems.

On another note, Reth is also very useful as a high-performance execution client built with Rust. It's important to remember that having a variety of execution clients is crucial for decentralization. Although there are alternatives similar to Ethers.js, Reth is one of the newer implementations out there, and with features that you won't find in others like ExEx, I believe it offers both uniqueness and promising potential for the future."
2025-03-12T02:22:05.162Z,L1Juror26,https://github.com/hyperledger/besu,https://github.com/scaffold-eth/scaffold-eth-2,ethereum,2,2.0,"I will vote for Scaffold Eth 2 over Besu because it provides a practical toolkit for developers to easily build and test decentralized applications (dapps) on Ethereum.

While Besu is an important Ethereum client, Scaffold Eth 2 has more to offers helping Ethereum dapp development faster and more accessible."
2025-03-24T22:11:47.595Z,L1Juror27,https://github.com/ethers-io/ethers.js,https://github.com/hyperledger/besu,ethereum,1,5.0,"Ethers.js is a core tool for dApp development. It's used across front-end, mobile, and server environments to connect wallets, blockchains, and smart contracts. It serves as the interface layer for end-user experience—essentially a ""browser-level"" tool in the Web3 ecosystem. Developers, project teams, and everyday users all rely on Ether.js.
Besu, on the other hand, is a blockchain client/node software, mainly used for setting up or running a blockchain network. It's typically used only by a small number of enterprises, research institutions, or low-level protocol developers—ordinary developers and users rarely interact with it directly. While Besu is important, it's ""too far from the user"" and falls under infrastructure.
Market demand for Ethers.js is significantly greater than for Besu. There are about five other clients similar to Besu. Therefore, Ethers.js deserves five times the credit."
2025-03-24T22:29:31.253Z,L1Juror27,https://github.com/consensys/teku,https://github.com/hyperledger-web3j/web3j,ethereum,2,5.0,"web3j is an Ethereum client SDK written in Java and Android, designed to enable interaction with the Ethereum blockchain from Java applications. Its role is comparable to Ethers.js or Web3.js in the Java ecosystem. For Java developers, web3j is the primary tool for connecting to Ethereum, calling smart contracts, and sending transactions. It is especially a great choice for developers integrating Web3 into Android mobile applications.
Teku is a Java-based consensus client, currently holding around 27% of the Ethereum consensus client market share. As a part of Ethereum’s core infrastructure, Teku represents the important presence of Java in consensus-layer development. However, with the emergence of new consensus mechanisms and a growing number of client implementations, Teku’s share may gradually decline.
I still firmly believe that developer-facing tools are more important than Ethereum infrastructure clients. Execution and consensus clients are interchangeable within a multi-client ecosystem and are generally far removed from most developers and end users. In contrast, developer tools are used by all Web3 developers, and their functionality, iteration speed, completeness, and security have a direct and immediate impact on the developer experience."
2025-03-24T22:42:23.915Z,L1Juror27,https://github.com/sigp/lighthouse,https://github.com/safe-global/safe-smart-account,ethereum,2,5.0,"The Safe Smart Account is a developer-focused TypeScript SDK designed for building, managing, and operating smart contract accounts based on Safe + ERC-4337. It fully supports the Account Abstraction workflow and is considered one of the core tools for developing next-generation Web3 wallets.

Lighthouse is a high-performance, open-source Ethereum consensus client written in Rust, used to run Ethereum 2.0 (PoS) validator nodes. By running Lighthouse, users can participate in block validation, stake ETH, and help maintain Ethereum network consensus.

Lighthouse currently holds around 32% of the consensus client market share. As of January 2024, more than 100 projects have adopted the Safe Smart Account. Since security is always the top priority for Ethereum, the Safe Smart Account deserves 3× more credit than Lighthouse."
2025-03-24T22:46:32.827Z,L1Juror27,https://github.com/grandinetech/grandine,https://github.com/ethereum/go-ethereum,ethereum,2,22.0,"Go-Ethereum (Geth) is a mainstream execution client for Ethereum, officially maintained and written in Go. It handles transaction processing, smart contract execution, and block synchronization, making it one of the most widely used node software solutions on the Ethereum mainnet. Developers and users can use Geth to run full nodes, deploy private chains, or interact deeply with the Ethereum network.

Grandine is a lightweight Ethereum consensus client written in Rust, designed for performance and modularity. It follows the Ethereum Proof-of-Stake consensus protocol and works alongside execution clients like Geth or Nethermind to participate in block validation. Although it currently has low usage, it showcases a new direction and technical diversity in consensus client development.

Grandine holds approximately 1.94% of the consensus client market, while Geth accounts for 43% of execution clients. Therefore, Geth deserves 22 times more credit than Grandine."
2025-03-24T22:52:10.228Z,L1Juror27,https://github.com/consensys/teku,https://github.com/grandinetech/grandine,ethereum,1,28.0,"Teku is an Ethereum consensus client developed by ConsenSys and written in Java, supporting the operation of Ethereum 2.0 (PoS) validator nodes. It is specifically designed for enterprise-grade deployments, with a focus on stability, security, and spec compliance. Teku works in tandem with execution clients such as Geth or Besu to participate in block validation and maintain network consensus.

Grandine is a lightweight Ethereum consensus client written in Rust, optimized for performance and modular architecture. It follows the Ethereum PoS consensus protocol and operates alongside execution clients like Geth or Nethermind to validate blocks. While its usage is currently limited, it represents a new direction and technical diversity in consensus client implementations.

Currently, Teku holds a 27.28% share of the consensus client market, while Grandine holds 1.94%, making Teku’s market share approximately 14 times greater. Moreover, there are two Rust-based consensus clients, while Teku is the only Java-based consensus client. Therefore, Teku deserves 28 times more credit than Grandine."
2025-03-24T22:57:51.653Z,L1Juror27,https://github.com/ethereum/go-ethereum,https://github.com/ethereum/web3.py,ethereum,1,5.0,"Go-Ethereum (Geth) is the officially maintained and Go-based execution client for Ethereum. It handles transaction processing, smart contract execution, and block synchronization, making it one of the most widely used node software on the Ethereum mainnet. Developers and users can use Geth to run full nodes, deploy private chains, or deeply interact with the Ethereum network. It currently holds 43% of the market share, giving it a dominant position. Therefore, Geth's stability and security are critically important to Ethereum.

Web3.py is an Ethereum development library written in Python, and it is the most widely used Ethereum library in the Python ecosystem. It is commonly applied in data analysis, on-chain interaction, automation scripts, and research projects. Although smaller in scale compared to JavaScript-based tools like Ethers.js, it plays an important role in Web3 data engineering, backend services, and AI-related blockchain research.

Since Web3.py does not directly affect the operation or security of the Ethereum mainnet, its overall importance is considered lower than that of Geth."
2025-03-24T23:00:17.260Z,L1Juror27,https://github.com/sigp/lighthouse,https://github.com/nomicfoundation/hardhat,ethereum,2,5.0,"nomicfoundation/hardhat is a powerful Ethereum development environment and build toolchain. It supports Solidity compilation, contract deployment, automated testing, scripting, and local node simulation, making it one of the mainstream tools for modern smart contract development. Hardhat features a rich plugin system and integrates widely with Ethers.js, TypeScript, and front-end frameworks, making it ideal for professional Web3 dApp development workflows. Its application scope is broader and it is much closer to developers — thus, its importance is greater."
2025-03-24T23:03:40.270Z,L1Juror27,https://github.com/alloy-rs/alloy,https://github.com/ethereum/solidity,ethereum,2,5.0,"alloy-rs/alloy is a modular and modern Ethereum development toolkit written in Rust, designed to provide end-to-end Web3 development support for Rust developers. It includes core modules such as EVM encoding/decoding, RPC interfaces, ABI parsing, signature handling, and transaction construction. Alloy is quickly becoming one of the key tools for building Ethereum applications and protocols in the Rust ecosystem.

Solidity is the primary smart contract programming language on Ethereum, specifically designed for writing and deploying contracts on the EVM (Ethereum Virtual Machine). It is the core language behind the development of Web3 applications such as DeFi, NFTs, and DAOs, and has become the industry standard for blockchain smart contract development.

Solidity is widely regarded as the cornerstone of Ethereum development, playing a more central role than most other tools and languages."
2025-03-24T23:06:56.742Z,L1Juror27,https://github.com/grandinetech/grandine,https://github.com/scaffold-eth/scaffold-eth-2,ethereum,2,3.0,"scaffold-eth/scaffold-eth-2 is an Ethereum dApp development template designed for quickly building full-stack Web3 applications. It integrates core tools such as Viem, Next.js, RainbowKit, Ethers.js, and Hardhat, providing out-of-the-box support for contract compilation, deployment, front-end interaction, and wallet connectivity. As an upgraded version of Scaffold-ETH, Scaffold-ETH-2 is more modular, type-safe, and compatible with EVM chains, making it an efficient starting point for learning and building Web3 applications.
Based on the personal principle that the closer a tool is to developers, the more important it is, Scaffold-ETH-2 is more important than the consensus client Grandine — especially from an application development perspective."
2025-03-24T23:08:56.072Z,L1Juror27,https://github.com/safe-global/safe-smart-account,https://github.com/ethereum/fe,ethereum,1,10.0,"ethereum/fe is a new smart contract programming language called Fe (Ferrum), supported by the Ethereum Foundation and designed specifically for the Ethereum Virtual Machine (EVM). It draws inspiration from the syntax of Rust and Python, with a focus on security, simplicity, and predictability—making it a potential complement or alternative to Solidity. Compared to the widely adopted safe-global/safe-smart-account, its importance is significantly lower."
2025-03-30T04:17:04.680Z,L1Juror28,https://github.com/ethereumjs/ethereumjs-monorepo,https://github.com/vyperlang/titanoboa,ethereum,1,3.5,"Titanoboa is a Vyper interpreter that provides excellent debug/traceback/fork capabilities for Vyper users. I believe this goal is quite important, as it can attract more developers to Vyper, similar to what Foundry did for Solidity developers. However, ethereumjs is a complete implementation of the Ethereum protocol, including EVM and data structure implementations. It also serves as a reference benchmark for EIP testing. Therefore, considering the number of stars on the project and how ethereumjs influences implementations such as ethers.js/viem/metamask, I believe it has a greater impact, which is why I choose ethereumjs."
2025-03-30T04:19:32.173Z,L1Juror28,https://github.com/erigontech/erigon,https://github.com/ethereum/go-ethereum,ethereum,2,10.0,"Geth's code has been refined over many years, having gone through multiple fork upgrades. In terms of code quality and depth of consensus layer implementation, it has become a crucial learning and reference benchmark for developers. Simultaneously, many of its modules have been extracted to develop more node-related applications. Considering its influence and role as a reference implementation, I would choose Geth over Erigon."
2025-03-30T04:24:26.983Z,L1Juror28,https://github.com/ethereum-lists/chains,https://github.com/nethereum/nethereum,ethereum,2,2.0,"Chainid network is a great metadata collection page that makes it easy for users to obtain network information, but since it's only a data format, it can be easily replaced. Unless it has more interoperability-related standard definitions like CAIP and other standards. Nethereum is a library for the .NET platform, like Besu for Java. .NET and Java are languages traditionally adopted by industry. Therefore, from an enterprise application perspective, a .NET library can reach more users."
2025-03-30T04:34:06.299Z,L1Juror28,https://github.com/status-im/nimbus-eth2,https://github.com/chainsafe/lodestar,ethereum,1,2.0,"Nimbus and Lodestar are both CL clients. I would choose Nimbus based on the following points: it's friendly to light clients, the nodes are relatively stable, it outputs system metrics for observation, and it has a slightly higher market share. However, neither of them is a mainstream CL client."
2025-03-30T04:38:09.817Z,L1Juror28,https://github.com/paradigmxyz/reth,https://github.com/nethermindeth/nethermind,ethereum,1,7.5,"Reth is a complete Ethereum protocol implementation with many libraries or modules that can be extracted for implementing node applications, such as indexers/searchers. Nethereum is a library on the .NET platform, and although many industries use it, from a long-term perspective, Rust will be a relatively mainstream development tool. Therefore, in terms of tool richness and influence, I choose Reth."
2025-03-30T05:01:54.338Z,L1Juror28,https://github.com/ethereum/sourcify,https://github.com/consensys/teku,ethereum,2,5.0,"Sourcify provides contract verification and file consistency services, which are very important for ensuring contract security. Teku is a CL client developed in Java, which serves as a reference for Java developers, especially for use in the web2 industry (institutions/banks). Additionally, CL development requires keeping up with EIPs and specs, which is relatively tedious work. Therefore, I choose Teku."
2025-03-30T05:04:18.025Z,L1Juror28,https://github.com/scaffold-eth/scaffold-eth-2,https://github.com/ethereum-lists/chains,ethereum,1,8.0,"Scaffold-eth-2 provides a basic framework that allows dapp developers to quickly have a complete functional environment, especially common in hackathon competitions, serving as a frontend Swiss Army knife. As a one-stop development environment, scaffold-eth-2 is excellent foundational material and includes many web3 concepts such as ENS, wallets, contract interactions, etc. Compared to web3 packages, it helps more people understand Ethereum's development ecosystem. Chainid network is a great metadata collection page that makes it easy for users to obtain network information, but since it's only a data format, it can be easily replaced."
2025-03-30T05:09:59.940Z,L1Juror28,https://github.com/sigp/lighthouse,https://github.com/grandinetech/grandine,ethereum,1,10.0,"Lighthouse is a mainstream and more mature CL client, while Grandine is newer and is a high-performance light client. The two have somewhat different positioning. Lighthouse has been online for many years, safeguarding Ethereum POS security. However, light clients have their own positioning, especially in the current situation where service providers are still running clients. The evolution and emergence of light clients will bring greater decentralization and popularization. Considering the current situation, I choose Lighthouse due to its greater influence, but don't rule out that Grandine's importance may increase in the future."
2025-03-30T05:12:19.476Z,L1Juror28,https://github.com/paradigmxyz/reth,https://github.com/ethereum/remix-project,ethereum,1,5.0,"reth is a complete Ethereum protocol implementation with many libraries or modules that can be extracted for implementing node applications, such as indexers/searchers. The remix-project, as an early tool for contract developers, conveniently allows contract compilation/testing/operation on the web. Since there are currently many mature tools and packages available, compared to reth which enables developers to develop high-performance applications on the underlying protocol, I ultimately choose reth."
2025-03-30T05:16:06.551Z,L1Juror28,https://github.com/erigontech/erigon,https://github.com/foundry-rs/foundry,ethereum,2,20.0,"Foundry as a contract development framework provides many convenient tools, from testing tools, high-performance environment, friendly debuggers, contract calldata encoding tools, and provides a fork environment, greatly improving developers' experience from the previously inefficient truffle/hardhat environments. Erigon is an EL client. Considering that Erigon's adoption rate is not that high, although EL client implementation is quite important, there are other clients existing for diversity. Considering the convenience and influence that Foundry brings to contract developers, I choose Foundry."
2025-03-30T21:17:32.819Z,L1Juror29,https://github.com/ethereum/go-ethereum,https://github.com/status-im/nimbus-eth2,ethereum,2,2.0,"Even though Geth is more broadly used, Nimbus is more aligned with decentralization goals, lowers the barrier to entry for solo stakers and diverse infrastructure, and provides technical simplicity in a world of increasingly heavy Ethereum clients."
2025-03-30T21:18:25.091Z,L1Juror29,https://github.com/consensys/teku,https://github.com/erigontech/erigon,ethereum,2,1.0,equally useful
2025-03-30T21:18:40.643Z,L1Juror29,https://github.com/ethers-io/ethers.js,https://github.com/openzeppelin/openzeppelin-contracts,ethereum,1,4.0,ethers.js is more foundational
2025-03-30T21:19:41.644Z,L1Juror29,https://github.com/ethereum/remix-project,https://github.com/status-im/nimbus-eth2,ethereum,1,10.0,remix was key to onboarding a whole generation of solidity developers. nimbus has alternatives
2025-03-30T21:20:45.861Z,L1Juror29,https://github.com/vyperlang/titanoboa,https://github.com/consensys/teku,ethereum,2,3.0,Teku is essential to Ethereum’s secure operation and network diversity. Vyper is niche
2025-03-30T21:22:10.399Z,L1Juror29,https://github.com/scaffold-eth/scaffold-eth-2,https://github.com/alloy-rs/alloy,ethereum,2,5.0,"Alloy powers wallets, dApps, indexers, and backends with typed, fast, modular code - real world use cases. Scaffold is more of a prototyping tool."
2025-03-30T21:23:14.377Z,L1Juror29,https://github.com/scaffold-eth/scaffold-eth-2,https://github.com/ethers-io/ethers.js,ethereum,2,3.0,Ethers.js is long term code; Scaffold is for prototyping
2025-03-30T21:23:51.694Z,L1Juror29,https://github.com/ethereum/go-ethereum,https://github.com/consensys/teku,ethereum,1,10.0,Geth is the dominant Ethereum execution client!
2025-03-30T21:25:10.009Z,L1Juror29,https://github.com/safe-global/safe-smart-account,https://github.com/ethereum/web3.py,ethereum,2,2.0,"While Safe Smart Accounts are essential to multisig security and DAO operations, web3.py serves as the core Python bridge to Ethereum, powering a wide range of critical infrastructure — from bots to analytics — across the industry."
2025-03-30T21:26:03.371Z,L1Juror29,https://github.com/eth-infinitism/account-abstraction,https://github.com/chainsafe/lodestar,ethereum,1,2.0,Chain abstraction solves a lot of problems we couldn't seamlessly solve otherwise. There are alternatives to lodestar
2025-03-30T21:27:35.282Z,L1Juror29,https://github.com/ethereum/sourcify,https://github.com/nethereum/nethereum,ethereum,2,2.0,"Nethereum’s role in integrating Ethereum with the widely-used .NET ecosystem has a substantial impact on expanding the developer base and fostering innovation within the blockchain space. While Sourcify plays a crucial role in enhancing transparency and security through contract verification, the broader applicability and dependency on Nethereum within the .NET development community give it a slight edge in overall usefulness."
2025-03-31T16:32:48.675Z,L1Juror30,https://github.com/hyperledger/besu,https://github.com/ethereum/go-ethereum,ethereum,2,5.0,"The Geth is obviously more widely used than the Besu. I think it worth 2 times.

Moreover, Geth has a very long history. This worth 3 times.

Therefore, I prefer 2+3=5 times."
2025-01-06T11:39:57.877Z,L1Juror4,https://github.com/prysmaticlabs/prysm,https://github.com/status-im/nimbus-eth2,ethereum,1,1.1,mainnet usage ~33% vs 5% in favor of prysm; CL diversity contribution boost for nimbus 3x; 2x boost for Nimbus for having remained independent
2025-01-06T11:48:38.625Z,L1Juror4,https://github.com/chainsafe/lodestar,https://github.com/paradigmxyz/reth,ethereum,1,1.5,Mainnet usage rate ~2% Lodestar vs ~4% Reth; Writing EL harder than CL boost for Reth 2x; Lodestar CL client diversity boost 3x; Reth ACD/Governance capture risk contribution malus 0.5x
2025-06-01T07:39:19.536Z,L1Juror4,https://github.com/chainsafe/lodestar,https://github.com/a16z/helios,ethereum,1,5.0,"Lodestar - despite lower network penetration - is famous for best-in-class validator client interop and serves as lightweight and robust consensus client.
Helios as a light-client hasn't seem similar traction, but maybe will in the future"
2025-06-01T07:37:57.710Z,L1Juror4,https://github.com/ethereum/go-ethereum,https://github.com/nethermindeth/nethermind,ethereum,1,50.0,"Geth has been the backbone of Ethereum for a decade, has countless forks - and generated billions of value.
Nethermind wouldn't have been able without Geth, could piggyback and scale up its usage in the slipstream of Geth."
2025-06-01T07:24:37.359Z,L1Juror4,https://github.com/status-im/nimbus-eth2,https://github.com/grandinetech/grandine,ethereum,1,10.0,"Both clients have minory CL client usage share among validators. Nimbus has been around since the early days of the beacon chain, is an implementation from scratch (Grandine re-used existing infra). Nimbus also serves low-powered devices particularly well."
2025-06-01T07:18:42.558Z,L1Juror4,https://github.com/foundry-rs/foundry,https://github.com/sigp/lighthouse,ethereum,2,25.0,"Lighthouse stems the load of about 1/3 of all consensus participants, serving a major role in securing the network and thus can be seen as significantly more valuable compared to Foundry"
2025-01-06T11:59:57.694Z,L1Juror4,https://github.com/erigontech/erigon,https://github.com/eth-infinitism/account-abstraction,ethereum,1,6.0,"EL clients somewhat enable AA frameworks in the first place, have much bigger scope and weight to lift for Ethereum as a whole (3x boost). Moreover, Erigon significantly contributed to DB innovations (2x). AA historically could not have contributed to the success of Ethereum in an equal fashion."
2024-12-31T10:54:20.684Z,L1Juror5,https://github.com/ethereum/remix-project,https://github.com/paradigmxyz/reth,ethereum,1,1.5,"Both projects feel very similar in impact, while Reth has lit a fire under other execution clients, I feel that remix has been very instrumental in bringing in new people into the ecosystem. Almost every smart contract developer that I talked to has started out building small things on remix before building with better tools, its a great platform for prototyping"
2024-12-31T10:56:05.764Z,L1Juror5,https://github.com/prysmaticlabs/prysm,https://github.com/ethereum/go-ethereum,ethereum,2,4.0,"Very hard comparison. Prysm has been instrumental in the early days of the beacon chain, but I feel that they are not driving the network forward as much as go-ethereum has been doing. Go-ethereum also has been supporting the network for ~3 times as long as prysm"
2024-12-31T10:57:40.797Z,L1Juror5,https://github.com/status-im/nimbus-eth2,https://github.com/erigontech/erigon,ethereum,1,1.1,"I feel like both are very similar in their contributions to ethereum, but the nimbus team is more involved in all of the core development conversation while erigon is following the progress with very little input on their side"
2025-05-26T10:21:15.737Z,L1Juror5,https://github.com/consensys/teku,https://github.com/ethereum/solidity,ethereum,2,3.0,"Solidity is the most used language, teku is one of many CL clients"
2025-05-26T10:41:36.343Z,L1Juror5,https://github.com/ethereum-lists/chains,https://github.com/prysmaticlabs/prysm,ethereum,2,200.0,"As one of the main CL clients, prysm is much more valuable"
2025-05-26T10:38:23.068Z,L1Juror5,https://github.com/hyperledger/besu,https://github.com/ethereum-lists/chains,ethereum,1,100.0,Besu is much more important (and a way more complicated piece of software)
2024-12-31T10:59:59.274Z,L1Juror5,https://github.com/status-im/nimbus-eth2,https://github.com/paradigmxyz/reth,ethereum,2,1.1,"Both are very close to each other in orders of impact imo, but I feel like reth has been pushing a lot recently, while nimbus has stopped contributing as much to the discussions."
2025-01-28T10:15:00.418Z,L1Juror6,https://github.com/wevm/viem,https://github.com/openzeppelin/openzeppelin-contracts,ethereum,2,20.0,"Numerous application layer deverlopers rely on the safety standards set by openzeppelin contracts, thus, it's userbase is bigger than the viem one."
2025-01-28T10:15:30.931Z,L1Juror6,https://github.com/ethereum/fe,https://github.com/vyperlang/titanoboa,ethereum,2,1.0,Both represent improtant alternatives to solidity and deserve the same credits.
2025-01-28T10:16:09.031Z,L1Juror6,https://github.com/vyperlang/vyper,https://github.com/grandinetech/grandine,ethereum,2,2.0,Grandine as a CL client deserves slightly more credits than the vyper programming language.
2025-02-10T10:14:57.214Z,L1Juror6,https://github.com/nethereum/nethereum,https://github.com/prysmaticlabs/prysm,ethereum,2,2.0,"Prysm and Nethermind are both ethereum clients that are used by a significant portion of the network. While one operates on the CL and the other one on the EL, it's difficult to compare their criticality for Ethereum and therefore they deserve the same weight. Prysm has slighlt more usage, thus, prysm gets more credits, but Nethermind is also used by L2s, making it less clear."
2025-02-10T10:16:03.996Z,L1Juror6,https://github.com/grandinetech/grandine,https://github.com/vyperlang/titanoboa,ethereum,2,1.0,"While grandine is a minority client with little usage, titanoboa is more used and thus more critical to users of Ethereum."
2025-02-10T10:17:28.203Z,L1Juror6,https://github.com/nomicfoundation/hardhat,https://github.com/openzeppelin/openzeppelin-contracts,ethereum,1,5.0,"While the openzeppelin-contracts provide an important foundation for secure smart contract development for many projects, even more rely on hardhat for software development. Thus, the multiplier for hard should be a higher than the one for openzeppelin contracts."
2025-02-10T10:19:39.512Z,L1Juror6,https://github.com/openzeppelin/openzeppelin-contracts,https://github.com/safe-global/safe-smart-account,ethereum,2,3.0,"Many individuals and project heavily rely on the reliability and security of safe-smart-account. A bug would potentially cost billions. On the other hand, the same can be said for openzeppelin-contracts that present the smart contract foundation for many project lauching on Ethereum. Still, the amount of money involved in safe wallets contributes to safe-global deserving a bigger multiplier."
2025-02-10T10:22:16.507Z,L1Juror6,https://github.com/erigontech/erigon,https://github.com/wevm/viem,ethereum,1,2.0,"Erigon is a widely used Ethereum execution client that focuses on being a great archive node, as compared to other clients such as Geth. This is a very important for Ethereum. Viem is a typescript abstraction for Ethereum that is also very important to many but less critical than a execution client."
2025-01-06T14:31:02.748Z,L1Juror7,https://github.com/ethereum/go-ethereum,https://github.com/sigp/lighthouse,ethereum,1,1.0,The same. CL vs EL
2025-01-06T14:31:20.921Z,L1Juror7,https://github.com/chainsafe/lodestar,https://github.com/consensys/teku,ethereum,2,1.5,usages
2025-01-08T17:17:07.362Z,L1Juror8,https://github.com/ethereum/py-evm,https://github.com/safe-global/safe-smart-account,ethereum,2,500.0,"safe is widely used in ecosystem, secures lots of $$$"
2025-01-08T17:17:32.528Z,L1Juror8,https://github.com/grandinetech/grandine,https://github.com/eth-infinitism/account-abstraction,ethereum,2,300.0,grandine is quite early on their client journey; AA has had a lot more usage to date
2025-03-01T07:14:47.140Z,L1Juror9,https://github.com/openzeppelin/openzeppelin-contracts,https://github.com/vyperlang/titanoboa,ethereum,1,100.0,"I find OZ contracts more important because the number of Solidity developers is significantly higher than that of Vyper in any given metric. I'd also argue that it's OZ that has taken Solidity this far: it starts with templates and continues with many security features, offering upgradability packages, access control, and helping to push for signing standards like ERC712. Without OZ, Solidity probably wouldn't have such dominance in the dev market."
2025-03-01T07:19:51.280Z,L1Juror9,https://github.com/consensys/teku,https://github.com/ethereum/web3.py,ethereum,2,10.0,"I think the Python community is relatively small compared to Rust/JavaScript, but still, arguably the biggest Python core package has a significant impact. I haven't seen as many other ""Python SDKs"" built on web3.py compared to the JavaScript ecosystem, but definitely, web3.py simplifies a lot for data scientists to read on-chain logs and conduct analysis in an easy language. Teku is a very important client, but it's in Java and doesn't provide as much help as a dependency compared to web3.py."
2025-03-01T07:23:49.752Z,L1Juror9,https://github.com/safe-global/safe-smart-account,https://github.com/paradigmxyz/reth,ethereum,2,8.0,"I think execution clients play a significant role in the success of the EVM. Reth is not as big in market share now, but it has been the primary client for L2 teams (provided by RaaS providers like Conduit) to scale execution speed, L2 gas limits, and so much more. If we consider L2 the ""success of Ethereum,"" then Reth is playing an increasingly important role in helping to scale Ethereum with L2 execution clients. 
On the other hand, I don't think EIP-4337 has gained significant traction yet; so far, there is no evidence that Account Abstraction (AA) has contributed anything to improve Ethereum. However, I do think sending the signal that Ethereum wants to build AA with a collaborative effort and has a clear roadmap for an anti-censorship future is important."
2025-03-01T07:31:41.353Z,L1Juror9,https://github.com/foundry-rs/foundry,https://github.com/paradigmxyz/reth,ethereum,1,20.0,"The same team is building them, and Reth is a very important client, especially with L2 teams. However, Foundry has single-handedly lifted the boundaries of contract development for everyone, not just in terms of speed (even though it's easily the most important metric), but developing contracts with a Solidity-only framework is a huge step. It removes a lot of friction in development by eliminating unnecessary JavaScript dependencies and syntax differences that you have to switch between during development. Foundry also plays a significant role in security; it helps us write fuzz tests and formal verification tools (Halos) with ease. It has made fork tests fast and effective, and it is one of the most important projects that has contributed massively to EVM. 
I consider Reth and L2 clients more like infrastructure work, and foundry bootstrap all the ""products"" (DApps) along with security researchers. The latter significantly outweighs the former in terms of impact."
2025-03-01T07:34:19.636Z,L1Juror9,https://github.com/ethereum/remix-project,https://github.com/prysmaticlabs/prysm,ethereum,2,10.0,"I think Prysm, as a consensus layer, is a lot more valuable because it's the second biggest consensus client today, while Remix is no longer anyone's favorite when it comes to either onboarding new people or real development."
2025-03-01T07:35:55.487Z,L1Juror9,https://github.com/ethereum-lists/chains,https://github.com/ethereum/web3.py,ethereum,2,10.0,"I believe web3.py is still more valuable given how most Python scripts, bots, and analysis tools might have used it, while the chainId list is like a tool that saves people's time but is not something we cannot live without."
2025-05-26T10:17:36.379Z,L1Juror37,https://github.com/alloy-rs/alloy,https://github.com/ethereum/web3.py,ethereum,1,500.0,More and more developer use rust sdk
2025-05-26T10:19:21.409Z,L1Juror37,https://github.com/prysmaticlabs/prysm,https://github.com/ethereum/remix-project,ethereum,2,300.0,Better to new comer
2025-06-06T22:46:13.940Z,L1Juror31,https://github.com/vyperlang/titanoboa,https://github.com/ethers-io/ethers.js,ethereum,2,20.0,Ethers introduced important improvements into thinking about how javascript tooling could be improved.
2025-06-06T22:48:42.290Z,L1Juror31,https://github.com/openzeppelin/openzeppelin-contracts,https://github.com/ethereum/fe,ethereum,1,5.0,"It's so valuable to have go-to implementations of features and contracts. Fe is great, but for a specific subset of users that prefer Rust-like syntax."
2025-09-05T14:26:12.735Z,L1Juror35,https://github.com/prysmaticlabs/prysm,https://github.com/lambdaclass/lambda_ethereum_consensus,ethereum,1,5.0,Prysm has much more adoption afaik
2025-09-05T14:39:01.616Z,L1Juror35,https://github.com/argotorg/hevm,https://github.com/ethereum-lists/chains,ethereum,1,2.0,chain list is useful but also not critical tech in the way hevm is
2025-09-05T14:51:44.474Z,L1Juror35,https://github.com/ethereum/remix-project,https://github.com/ethpandaops/checkpointz,ethereum,1,2.0,Remix is important for dev onboarding and convenient
2025-09-05T14:53:00.963Z,L1Juror35,https://github.com/grandinetech/grandine,https://github.com/ethereum/eips,ethereum,2,10.0,EIPs keep ethereum omving forward
2025-09-05T19:40:16.601Z,L1Juror36,https://github.com/sigp/lighthouse,https://github.com/ethereum/execution-apis,ethereum,2,2.0,Cross-client reference APIs
2025-09-05T19:44:39.457Z,L1Juror36,https://github.com/hyperledger-web3j/web3j,https://github.com/argotorg/act,ethereum,1,100.0,Web3j has helped many projects and wallets ship on android
2025-05-26T14:50:49.744Z,L1Juror32,https://github.com/sigp/lighthouse,https://github.com/ethereum/go-ethereum,ethereum,2,1.0,"Both have about the same share of the EL/CL. If I had to say, Geth, which has a longer track record, would be more valuable.
https://clientdiversity.org/#why"
2025-05-26T14:18:57.110Z,L1Juror32,https://github.com/grandinetech/grandine,https://github.com/nethermindeth/nethermind,ethereum,2,30.0,"According to clientdiversity (https://clientdiversity.org/#why) nethermind has 38% share of EL; Grandine has 1.2% of CL. A simple comparison is worth 30 times more.

These roles are completely different and cannot be compared in general. It should also be noted that nethermind's oligopoly is not a good thing for Ethereum."
2025-05-26T11:45:04.944Z,L1Juror12,https://github.com/status-im/nimbus-eth2,https://github.com/prysmaticlabs/prysm,ethereum,2,2.0,"Prysm ~x5 usage, but Nimbus towards solo stakers and also improves client diversity, so halving that.

(I also personally run Nimbus to improve client diversity, so more impactful for me)"
2025-05-26T11:46:31.971Z,L1Juror12,https://github.com/nomicfoundation/hardhat,https://github.com/a16z/helios,ethereum,1,5.0,"Hardhat is a key component in many open source projects and has been for a long time

Helios is a newer kid on the block and qualitatively haven't heard of as much impact; it is also part of A16Z so less funding might be needed IMO"
2025-05-26T11:56:57.589Z,L1Juror12,https://github.com/openzeppelin/openzeppelin-contracts,https://github.com/nethermindeth/nethermind,ethereum,1,5.0,"Openzeppelin contracts impact massive, hard to underestimate

Nethermind very useful as alt to Geth

If both disappeared OZ would be way worse"
2025-05-26T11:58:23.351Z,L1Juror12,https://github.com/openzeppelin/openzeppelin-contracts,https://github.com/alloy-rs/alloy,ethereum,1,10.0,"Similar to before, OZ dwarfs impact

Can't really judge about x10 factor"
2025-05-30T15:15:56.772Z,L1Juror20,https://github.com/hyperledger-web3j/web3j,https://github.com/ethereum-lists/chains,ethereum,2,50.0,chainlist is very important to make sure we dont have collisions
2025-09-10T02:11:50.933Z,L1Juror11,https://github.com/nomicfoundation/hardhat,https://github.com/ethereum/execution-apis,ethereum,2,500.0,core protocol
2025-09-10T02:12:14.712Z,L1Juror11,https://github.com/erigontech/silkworm,https://github.com/consensys/teku,ethereum,2,200.0,client software
2025-09-10T02:12:31.076Z,L1Juror11,https://github.com/argotorg/fe,https://github.com/sigp/lighthouse,ethereum,2,500.0,core protocol
2025-09-09T20:19:42.307Z,L1Juror21,https://github.com/nethermindeth/nethermind,https://github.com/ethereum-lists/chains,ethereum,1,500.0,The amount of effort and engagement required to maintain an Ethereum client is at least an order of magnitude higher than a metadata webservice. People interested in using an L2 can generally get this metadata from the socials for the team running that L2 without this metadata so I give Nethermind another order of magnitude for it's relative significance.
2025-09-08T17:05:34.912Z,L1Juror30,https://github.com/ethpandaops/ethereum-package,https://github.com/ethereum/evmone,ethereum,2,2.0,"Ethereum-package is proposed to setup a private Ethereum testnet. Evmome implement the C implementation of EVM.  I think both of them are important. But maybe Evmone make it easier  to implement a new version of Ethereum client. For example, Geth or other clients can use Evmone to create new one. This is good for the client diversity."
2025-09-08T17:08:39.291Z,L1Juror30,https://github.com/vyperlang/titanoboa,https://github.com/ethdebug/format,ethereum,1,2.0,"Vyper is a important language for Etheruem, since Curve is based on Vyper. Hence I  think the titanoboa (Vyper interpreter) is important and more valuable."
2025-09-08T17:11:06.845Z,L1Juror30,https://github.com/erigontech/silkworm,https://github.com/status-im/nimbus-eth2,ethereum,2,2.0,"They are both clients for Ethereum. Although they are not the most popular ones, they play a important role in Etheruem ecosystem. no matter they are EL or CL clients. I think they are both valueable. I measure their credits by the github starts."
2025-09-08T17:16:00.685Z,L1Juror30,https://github.com/nethereum/nethereum,https://github.com/argotorg/act,ethereum,1,5.0,Nethereum makes it easier to manage the nodes and contracts for Ethereum. Act is designed for formal verification. It is unfair to compare them. But I think Nethereum looks more useful. Hence it should be more valueable.
2025-09-08T11:17:44.857Z,L1Juror38,https://github.com/ethereum/consensus-specs,https://github.com/ethereum/go-ethereum,ethereum,2,20.0,geth is the most used client.
2025-09-08T11:24:16.254Z,L1Juror38,https://github.com/ethereum/execution-apis,https://github.com/foundry-rs/foundry,ethereum,2,10.0,one of the most used devtool.
2025-09-08T11:28:39.233Z,L1Juror38,https://github.com/ethpandaops/checkpointz,https://github.com/ethereum/execution-apis,ethereum,1,3.0,checkpointz useful for quickly setting up a node.
2025-09-08T11:30:58.892Z,L1Juror38,https://github.com/eth-infinitism/account-abstraction,https://github.com/ethereum/evmone,ethereum,1,5.0,account-abstraction is really important for eth getting more adoption.
2025-09-08T11:36:51.137Z,L1Juror38,https://github.com/foundry-rs/foundry,https://github.com/ethpandaops/ethereum-helm-charts,ethereum,2,5.0,For supporting Ethereum devops.
2025-09-07T23:20:34.183Z,L1Juror26,https://github.com/prysmaticlabs/prysm,https://github.com/erigontech/silkworm,ethereum,1,2.0,"Prysm has been a long-running CL client since the launch of the Beacon Chain in 2020. Silkworm, being relatively new, may need a few more years before contributing at the same level as the existing clients."
2025-09-07T23:31:02.189Z,L1Juror26,https://github.com/foundry-rs/foundry,https://github.com/hyperledger-web3j/web3j,ethereum,1,2.0,"Web3j has been a popular Java and Android library for long, whereas Foundry, as a portable and modular toolkit for Ethereum application development, could become a popular choice in the future."
2025-09-07T23:42:16.538Z,L1Juror26,https://github.com/erigontech/erigon,https://github.com/nethermindeth/nethermind,ethereum,2,2.0,"Both Erigon and Nethermind have been stable EL clients; however, Nethermind’s active engagement with the community has helped increase Ethereum’s popularity among upcoming protocol developers and users."
2025-09-07T23:41:38.017Z,L1Juror26,https://github.com/ethpandaops/ethereum-package,https://github.com/ethereum/py-evm,ethereum,1,4.0,"ethereum-package is required for faster and more streamlined testing of upcoming upgrades. However, there are alternative implementations of the EVM specification available."
